# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class SuiviProdPlanification(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, theme: str=None, id_ut: str=None, type_travail: str=None, liste_classes: List[str]=None, date_fin_prevue: str=None, where_clause: str=None, geom: str=None):  # noqa: E501
        """SuiviProdPlanification - a model defined in Swagger

        :param theme: The theme of this SuiviProdPlanification.  # noqa: E501
        :type theme: str
        :param id_ut: The id_ut of this SuiviProdPlanification.  # noqa: E501
        :type id_ut: str
        :param type_travail: The type_travail of this SuiviProdPlanification.  # noqa: E501
        :type type_travail: str
        :param liste_classes: The liste_classes of this SuiviProdPlanification.  # noqa: E501
        :type liste_classes: List[str]
        :param date_fin_prevue: The date_fin_prevue of this SuiviProdPlanification.  # noqa: E501
        :type date_fin_prevue: str
        :param where_clause: The where_clause of this SuiviProdPlanification.  # noqa: E501
        :type where_clause: str
        :param geom: The geom of this SuiviProdPlanification.  # noqa: E501
        :type geom: str
        """
        self.swagger_types = {
            'theme': str,
            'id_ut': str,
            'type_travail': str,
            'liste_classes': List[str],
            'date_fin_prevue': str,
            'where_clause': str,
            'geom': str
        }

        self.attribute_map = {
            'theme': 'theme',
            'id_ut': 'id_ut',
            'type_travail': 'type_travail',
            'liste_classes': 'liste_classes',
            'date_fin_prevue': 'date_fin_prevue',
            'where_clause': 'where_clause',
            'geom': 'geom'
        }
        self._theme = theme
        self._id_ut = id_ut
        self._type_travail = type_travail
        self._liste_classes = liste_classes
        self._date_fin_prevue = date_fin_prevue
        self._where_clause = where_clause
        self._geom = geom

    @classmethod
    def from_dict(cls, dikt) -> 'SuiviProdPlanification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The suivi_prod_planification of this SuiviProdPlanification.  # noqa: E501
        :rtype: SuiviProdPlanification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def theme(self) -> str:
        """Gets the theme of this SuiviProdPlanification.


        :return: The theme of this SuiviProdPlanification.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this SuiviProdPlanification.


        :param theme: The theme of this SuiviProdPlanification.
        :type theme: str
        """

        self._theme = theme

    @property
    def id_ut(self) -> str:
        """Gets the id_ut of this SuiviProdPlanification.


        :return: The id_ut of this SuiviProdPlanification.
        :rtype: str
        """
        return self._id_ut

    @id_ut.setter
    def id_ut(self, id_ut: str):
        """Sets the id_ut of this SuiviProdPlanification.


        :param id_ut: The id_ut of this SuiviProdPlanification.
        :type id_ut: str
        """

        self._id_ut = id_ut

    @property
    def type_travail(self) -> str:
        """Gets the type_travail of this SuiviProdPlanification.


        :return: The type_travail of this SuiviProdPlanification.
        :rtype: str
        """
        return self._type_travail

    @type_travail.setter
    def type_travail(self, type_travail: str):
        """Sets the type_travail of this SuiviProdPlanification.


        :param type_travail: The type_travail of this SuiviProdPlanification.
        :type type_travail: str
        """

        self._type_travail = type_travail

    @property
    def liste_classes(self) -> List[str]:
        """Gets the liste_classes of this SuiviProdPlanification.


        :return: The liste_classes of this SuiviProdPlanification.
        :rtype: List[str]
        """
        return self._liste_classes

    @liste_classes.setter
    def liste_classes(self, liste_classes: List[str]):
        """Sets the liste_classes of this SuiviProdPlanification.


        :param liste_classes: The liste_classes of this SuiviProdPlanification.
        :type liste_classes: List[str]
        """

        self._liste_classes = liste_classes

    @property
    def date_fin_prevue(self) -> str:
        """Gets the date_fin_prevue of this SuiviProdPlanification.


        :return: The date_fin_prevue of this SuiviProdPlanification.
        :rtype: str
        """
        return self._date_fin_prevue

    @date_fin_prevue.setter
    def date_fin_prevue(self, date_fin_prevue: str):
        """Sets the date_fin_prevue of this SuiviProdPlanification.


        :param date_fin_prevue: The date_fin_prevue of this SuiviProdPlanification.
        :type date_fin_prevue: str
        """

        self._date_fin_prevue = date_fin_prevue

    @property
    def where_clause(self) -> str:
        """Gets the where_clause of this SuiviProdPlanification.


        :return: The where_clause of this SuiviProdPlanification.
        :rtype: str
        """
        return self._where_clause

    @where_clause.setter
    def where_clause(self, where_clause: str):
        """Sets the where_clause of this SuiviProdPlanification.


        :param where_clause: The where_clause of this SuiviProdPlanification.
        :type where_clause: str
        """

        self._where_clause = where_clause

    @property
    def geom(self) -> str:
        """Gets the geom of this SuiviProdPlanification.


        :return: The geom of this SuiviProdPlanification.
        :rtype: str
        """
        return self._geom

    @geom.setter
    def geom(self, geom: str):
        """Sets the geom of this SuiviProdPlanification.


        :param geom: The geom of this SuiviProdPlanification.
        :type geom: str
        """

        self._geom = geom
