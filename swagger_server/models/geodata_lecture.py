# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class GeodataLecture(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, theme: str=None, liste_classes: List[str]=None, clip: str=None, where_clause: str=None, geom: str=None):  # noqa: E501
        """GeodataLecture - a model defined in Swagger

        :param theme: The theme of this GeodataLecture.  # noqa: E501
        :type theme: str
        :param liste_classes: The liste_classes of this GeodataLecture.  # noqa: E501
        :type liste_classes: List[str]
        :param clip: The clip of this GeodataLecture.  # noqa: E501
        :type clip: str
        :param where_clause: The where_clause of this GeodataLecture.  # noqa: E501
        :type where_clause: str
        :param geom: The geom of this GeodataLecture.  # noqa: E501
        :type geom: str
        """
        self.swagger_types = {
            'theme': str,
            'liste_classes': List[str],
            'clip': str,
            'where_clause': str,
            'geom': str
        }

        self.attribute_map = {
            'theme': 'theme',
            'liste_classes': 'liste_classes',
            'clip': 'clip',
            'where_clause': 'where_clause',
            'geom': 'geom'
        }
        self._theme = theme
        self._liste_classes = liste_classes
        self._clip = clip
        self._where_clause = where_clause
        self._geom = geom

    @classmethod
    def from_dict(cls, dikt) -> 'GeodataLecture':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The geodata_lecture of this GeodataLecture.  # noqa: E501
        :rtype: GeodataLecture
        """
        return util.deserialize_model(dikt, cls)

    @property
    def theme(self) -> str:
        """Gets the theme of this GeodataLecture.


        :return: The theme of this GeodataLecture.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this GeodataLecture.


        :param theme: The theme of this GeodataLecture.
        :type theme: str
        """

        self._theme = theme

    @property
    def liste_classes(self) -> List[str]:
        """Gets the liste_classes of this GeodataLecture.


        :return: The liste_classes of this GeodataLecture.
        :rtype: List[str]
        """
        return self._liste_classes

    @liste_classes.setter
    def liste_classes(self, liste_classes: List[str]):
        """Sets the liste_classes of this GeodataLecture.


        :param liste_classes: The liste_classes of this GeodataLecture.
        :type liste_classes: List[str]
        """

        self._liste_classes = liste_classes

    @property
    def clip(self) -> str:
        """Gets the clip of this GeodataLecture.


        :return: The clip of this GeodataLecture.
        :rtype: str
        """
        return self._clip

    @clip.setter
    def clip(self, clip: str):
        """Sets the clip of this GeodataLecture.


        :param clip: The clip of this GeodataLecture.
        :type clip: str
        """
        allowed_values = ["oui", "non"]  # noqa: E501
        if clip not in allowed_values:
            raise ValueError(
                "Invalid value for `clip` ({0}), must be one of {1}"
                .format(clip, allowed_values)
            )

        self._clip = clip

    @property
    def where_clause(self) -> str:
        """Gets the where_clause of this GeodataLecture.


        :return: The where_clause of this GeodataLecture.
        :rtype: str
        """
        return self._where_clause

    @where_clause.setter
    def where_clause(self, where_clause: str):
        """Sets the where_clause of this GeodataLecture.


        :param where_clause: The where_clause of this GeodataLecture.
        :type where_clause: str
        """

        self._where_clause = where_clause

    @property
    def geom(self) -> str:
        """Gets the geom of this GeodataLecture.


        :return: The geom of this GeodataLecture.
        :rtype: str
        """
        return self._geom

    @geom.setter
    def geom(self, geom: str):
        """Sets the geom of this GeodataLecture.


        :param geom: The geom of this GeodataLecture.
        :type geom: str
        """

        self._geom = geom
