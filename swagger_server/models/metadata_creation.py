# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class MetadataCreation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, theme: str=None, id_ut: str=None, nom_catalogue: str=None, prod_desc: str=None, description_projet: str=None, logfile: str=None, liste_id_source: List[str]=None, liste_id_precision: List[str]=None, liste_id_contraintes_legales: List[str]=None):  # noqa: E501
        """MetadataCreation - a model defined in Swagger

        :param theme: The theme of this MetadataCreation.  # noqa: E501
        :type theme: str
        :param id_ut: The id_ut of this MetadataCreation.  # noqa: E501
        :type id_ut: str
        :param nom_catalogue: The nom_catalogue of this MetadataCreation.  # noqa: E501
        :type nom_catalogue: str
        :param prod_desc: The prod_desc of this MetadataCreation.  # noqa: E501
        :type prod_desc: str
        :param description_projet: The description_projet of this MetadataCreation.  # noqa: E501
        :type description_projet: str
        :param logfile: The logfile of this MetadataCreation.  # noqa: E501
        :type logfile: str
        :param liste_id_source: The liste_id_source of this MetadataCreation.  # noqa: E501
        :type liste_id_source: List[str]
        :param liste_id_precision: The liste_id_precision of this MetadataCreation.  # noqa: E501
        :type liste_id_precision: List[str]
        :param liste_id_contraintes_legales: The liste_id_contraintes_legales of this MetadataCreation.  # noqa: E501
        :type liste_id_contraintes_legales: List[str]
        """
        self.swagger_types = {
            'theme': str,
            'id_ut': str,
            'nom_catalogue': str,
            'prod_desc': str,
            'description_projet': str,
            'logfile': str,
            'liste_id_source': List[str],
            'liste_id_precision': List[str],
            'liste_id_contraintes_legales': List[str]
        }

        self.attribute_map = {
            'theme': 'theme',
            'id_ut': 'id_ut',
            'nom_catalogue': 'nom_catalogue',
            'prod_desc': 'prod_desc',
            'description_projet': 'description_projet',
            'logfile': 'logfile',
            'liste_id_source': 'liste_id_source',
            'liste_id_precision': 'liste_id_precision',
            'liste_id_contraintes_legales': 'liste_id_contraintes_legales'
        }
        self._theme = theme
        self._id_ut = id_ut
        self._nom_catalogue = nom_catalogue
        self._prod_desc = prod_desc
        self._description_projet = description_projet
        self._logfile = logfile
        self._liste_id_source = liste_id_source
        self._liste_id_precision = liste_id_precision
        self._liste_id_contraintes_legales = liste_id_contraintes_legales

    @classmethod
    def from_dict(cls, dikt) -> 'MetadataCreation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The metadata_creation of this MetadataCreation.  # noqa: E501
        :rtype: MetadataCreation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def theme(self) -> str:
        """Gets the theme of this MetadataCreation.


        :return: The theme of this MetadataCreation.
        :rtype: str
        """
        return self._theme

    @theme.setter
    def theme(self, theme: str):
        """Sets the theme of this MetadataCreation.


        :param theme: The theme of this MetadataCreation.
        :type theme: str
        """
        if theme is None:
            raise ValueError("Invalid value for `theme`, must not be `None`")  # noqa: E501

        self._theme = theme

    @property
    def id_ut(self) -> str:
        """Gets the id_ut of this MetadataCreation.


        :return: The id_ut of this MetadataCreation.
        :rtype: str
        """
        return self._id_ut

    @id_ut.setter
    def id_ut(self, id_ut: str):
        """Sets the id_ut of this MetadataCreation.


        :param id_ut: The id_ut of this MetadataCreation.
        :type id_ut: str
        """
        if id_ut is None:
            raise ValueError("Invalid value for `id_ut`, must not be `None`")  # noqa: E501

        self._id_ut = id_ut

    @property
    def nom_catalogue(self) -> str:
        """Gets the nom_catalogue of this MetadataCreation.


        :return: The nom_catalogue of this MetadataCreation.
        :rtype: str
        """
        return self._nom_catalogue

    @nom_catalogue.setter
    def nom_catalogue(self, nom_catalogue: str):
        """Sets the nom_catalogue of this MetadataCreation.


        :param nom_catalogue: The nom_catalogue of this MetadataCreation.
        :type nom_catalogue: str
        """
        if nom_catalogue is None:
            raise ValueError("Invalid value for `nom_catalogue`, must not be `None`")  # noqa: E501

        self._nom_catalogue = nom_catalogue

    @property
    def prod_desc(self) -> str:
        """Gets the prod_desc of this MetadataCreation.


        :return: The prod_desc of this MetadataCreation.
        :rtype: str
        """
        return self._prod_desc

    @prod_desc.setter
    def prod_desc(self, prod_desc: str):
        """Sets the prod_desc of this MetadataCreation.


        :param prod_desc: The prod_desc of this MetadataCreation.
        :type prod_desc: str
        """
        if prod_desc is None:
            raise ValueError("Invalid value for `prod_desc`, must not be `None`")  # noqa: E501

        self._prod_desc = prod_desc

    @property
    def description_projet(self) -> str:
        """Gets the description_projet of this MetadataCreation.


        :return: The description_projet of this MetadataCreation.
        :rtype: str
        """
        return self._description_projet

    @description_projet.setter
    def description_projet(self, description_projet: str):
        """Sets the description_projet of this MetadataCreation.


        :param description_projet: The description_projet of this MetadataCreation.
        :type description_projet: str
        """

        self._description_projet = description_projet

    @property
    def logfile(self) -> str:
        """Gets the logfile of this MetadataCreation.


        :return: The logfile of this MetadataCreation.
        :rtype: str
        """
        return self._logfile

    @logfile.setter
    def logfile(self, logfile: str):
        """Sets the logfile of this MetadataCreation.


        :param logfile: The logfile of this MetadataCreation.
        :type logfile: str
        """

        self._logfile = logfile

    @property
    def liste_id_source(self) -> List[str]:
        """Gets the liste_id_source of this MetadataCreation.


        :return: The liste_id_source of this MetadataCreation.
        :rtype: List[str]
        """
        return self._liste_id_source

    @liste_id_source.setter
    def liste_id_source(self, liste_id_source: List[str]):
        """Sets the liste_id_source of this MetadataCreation.


        :param liste_id_source: The liste_id_source of this MetadataCreation.
        :type liste_id_source: List[str]
        """

        self._liste_id_source = liste_id_source

    @property
    def liste_id_precision(self) -> List[str]:
        """Gets the liste_id_precision of this MetadataCreation.


        :return: The liste_id_precision of this MetadataCreation.
        :rtype: List[str]
        """
        return self._liste_id_precision

    @liste_id_precision.setter
    def liste_id_precision(self, liste_id_precision: List[str]):
        """Sets the liste_id_precision of this MetadataCreation.


        :param liste_id_precision: The liste_id_precision of this MetadataCreation.
        :type liste_id_precision: List[str]
        """

        self._liste_id_precision = liste_id_precision

    @property
    def liste_id_contraintes_legales(self) -> List[str]:
        """Gets the liste_id_contraintes_legales of this MetadataCreation.


        :return: The liste_id_contraintes_legales of this MetadataCreation.
        :rtype: List[str]
        """
        return self._liste_id_contraintes_legales

    @liste_id_contraintes_legales.setter
    def liste_id_contraintes_legales(self, liste_id_contraintes_legales: List[str]):
        """Sets the liste_id_contraintes_legales of this MetadataCreation.


        :param liste_id_contraintes_legales: The liste_id_contraintes_legales of this MetadataCreation.
        :type liste_id_contraintes_legales: List[str]
        """

        self._liste_id_contraintes_legales = liste_id_contraintes_legales
